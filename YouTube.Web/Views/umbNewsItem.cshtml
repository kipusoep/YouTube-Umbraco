@inherits UmbracoTemplatePage
@using YouTube.Extensions
@using YouTube.Models
            
@{
    Layout = "umbLayout.cshtml";
    
    // If the editor has not explicitly provided the "Page title" property page 
    // then just show the name of the page otherwise show the provided title
    var pageTitle = string.IsNullOrWhiteSpace(CurrentPage.Title)
        ? CurrentPage.Name
        : CurrentPage.Title;
}
<div id="main-wrapper">
    <div id="main" class="container">
        <div class="row">
            <div class="9u skel-cell-mainContent">
                <div class="content content-left">
                    <!-- Content -->
                    <article class="is-page-content">
                        <header>
                            <h2>@pageTitle</h2>
                        </header>
                        <section>
                            @if (string.IsNullOrWhiteSpace(CurrentPage.Image) == false)
                            {
                                <span class="image image-full"><img src="@CurrentPage.Image" alt="" /></span>
                            }

                            @CurrentPage.BodyText
                            
                            
                            @Model.Content.GetProperty("playlistPicker").Value<br/>
                            @*@Model.Content.GetProperty("video").XPathValue<br/>*@
                            @Model.Content.GetProperty("playlistPicker").DataValue<br/>
                            


                            @*@{
                                foreach (var dynamicVideo in CurrentPage.video)
                                {
                                    <div>@Html.Raw(dynamicVideo.Player.EmbedHtml)</div>
                                }
                            }
                            
                            @{
                                foreach (var typedVideo in Model.Content.GetPropertyValue<YouTube>("video"))
                                {   
                                    <div>@Html.Raw(typedVideo.Player.EmbedHtml)</div>
                                    @typedVideo.Snippet.Title<br/>
                                    @typedVideo.Statistics.ViewCount<br/>
                                    @typedVideo.Snippet.PublishedAt.Value.ToShortDateString()
                                }
                            }

                            <hr/>

                            @{
                                foreach (var typedVideo in Model.Content.GetPropertyValue<YouTube>("video").OrderByDescending(x => x.Statistics.ViewCount))
                                {
                                    <div>@Html.Raw(typedVideo.EmbedVideoWithOptions(modestBranding: true, theme: YouTubeExtensionMethods.Theme.light))</div>
                                    @typedVideo.Snippet.Title <span>Custom</span><br />
                                    @typedVideo.Statistics.ViewCount<br />
                                    @typedVideo.Snippet.PublishedAt.Value.ToShortDateString()
                                }
                            }*@
                        </section>                           
                    </article>
                    <!-- /Content -->
                </div>
            </div>
            <div class="3u">
                <div class="sidebar">
                    <!-- Sidebar -->
                    @{ Html.RenderPartial("umbLatestNewsWidget"); }
                    <!-- /Sidebar -->
                </div>
            </div>
        </div>
        <div class="row">
            <div class="12u">
                @{ Html.RenderPartial("umbFeatures"); }
            </div>
        </div>
    </div>
</div>
<!-- /Main -->